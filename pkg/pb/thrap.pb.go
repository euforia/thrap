// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thrap.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		thrap.proto

	It has these top-level messages:
		Profile
		Project
		Deployment
		DeploymentDescriptor
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_opencontainers_go_digest "github.com/opencontainers/go-digest"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeploymentState int32

const (
	DeploymentState_UNKNOWN DeploymentState = 0
	DeploymentState_CREATE  DeploymentState = 1
	DeploymentState_PREPARE DeploymentState = 2
	DeploymentState_DEPLOY  DeploymentState = 3
)

var DeploymentState_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE",
	2: "PREPARE",
	3: "DEPLOY",
}
var DeploymentState_value = map[string]int32{
	"UNKNOWN": 0,
	"CREATE":  1,
	"PREPARE": 2,
	"DEPLOY":  3,
}

func (x DeploymentState) String() string {
	return proto.EnumName(DeploymentState_name, int32(x))
}
func (DeploymentState) EnumDescriptor() ([]byte, []int) { return fileDescriptorThrap, []int{0} }

type DeployStateStatus int32

const (
	DeployStateStatus_INPROGRESS DeployStateStatus = 0
	DeployStateStatus_OK         DeployStateStatus = 1
	DeployStateStatus_FAILED     DeployStateStatus = 2
)

var DeployStateStatus_name = map[int32]string{
	0: "INPROGRESS",
	1: "OK",
	2: "FAILED",
}
var DeployStateStatus_value = map[string]int32{
	"INPROGRESS": 0,
	"OK":         1,
	"FAILED":     2,
}

func (x DeployStateStatus) String() string {
	return proto.EnumName(DeployStateStatus_name, int32(x))
}
func (DeployStateStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorThrap, []int{1} }

type Profile struct {
	ID           string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" hcle:"omit" yaml:"-"`
	Name         string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" hcl:"name"`
	Orchestrator string            `protobuf:"bytes,3,opt,name=Orchestrator,proto3" json:"Orchestrator,omitempty" hcl:"orchestrator"`
	Secrets      string            `protobuf:"bytes,4,opt,name=Secrets,proto3" json:"Secrets,omitempty" hcl:"secrets"`
	Registry     string            `protobuf:"bytes,5,opt,name=Registry,proto3" json:"Registry,omitempty" hcl:"registry"`
	VCS          string            `protobuf:"bytes,6,opt,name=VCS,proto3" json:"VCS,omitempty" hcl:"vcs"`
	Meta         map[string]string `protobuf:"bytes,7,rep,name=Meta" json:"Meta,omitempty" hcl:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variables    map[string]string `protobuf:"bytes,8,rep,name=Variables" json:"Variables,omitempty" hcl:"variables" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{0} }

func (m *Profile) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *Profile) GetSecrets() string {
	if m != nil {
		return m.Secrets
	}
	return ""
}

func (m *Profile) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *Profile) GetVCS() string {
	if m != nil {
		return m.VCS
	}
	return ""
}

func (m *Profile) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Profile) GetVariables() map[string]string {
	if m != nil {
		return m.Variables
	}
	return nil
}

type Project struct {
	ID          string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Source      string   `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	Owner       string   `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Maintainer  string   `protobuf:"bytes,6,opt,name=Maintainer,proto3" json:"Maintainer,omitempty"`
	Developers  []string `protobuf:"bytes,7,rep,name=Developers" json:"Developers,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{1} }

func (m *Project) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Project) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Project) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *Project) GetDevelopers() []string {
	if m != nil {
		return m.Developers
	}
	return nil
}

type Deployment struct {
	// Unique deployment instance name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Incremented on each deploy
	Version uint64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// Action marshalled & normalized deploy job
	Spec []byte `protobuf:"bytes,3,opt,name=Spec,proto3" json:"Spec,omitempty"`
	// Profile for this deployment
	Profile *Profile `protobuf:"bytes,4,opt,name=Profile" json:"Profile,omitempty"`
	// State the deployment is in
	State DeploymentState `protobuf:"varint,5,opt,name=State,proto3,enum=DeploymentState" json:"State,omitempty"`
	// Status of the given state
	Status DeployStateStatus `protobuf:"varint,6,opt,name=Status,proto3,enum=DeployStateStatus" json:"Status,omitempty"`
	// When the deploy object was created
	CreatedAt int64 `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	// Last modified time of update
	ModifiedAt int64 `protobuf:"varint,8,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	// Nonce set when deploy is created
	Nonce uint64 `protobuf:"varint,9,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// Digest of previous deployment object
	Previous github_com_opencontainers_go_digest.Digest `protobuf:"bytes,10,opt,name=Previous,proto3,casttype=github.com/opencontainers/go-digest.Digest" json:"Previous,omitempty"`
	// Additional info about the current state
	StateMessage string `protobuf:"bytes,11,opt,name=StateMessage,proto3" json:"StateMessage,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{2} }

func (m *Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deployment) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Deployment) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Deployment) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Deployment) GetState() DeploymentState {
	if m != nil {
		return m.State
	}
	return DeploymentState_UNKNOWN
}

func (m *Deployment) GetStatus() DeployStateStatus {
	if m != nil {
		return m.Status
	}
	return DeployStateStatus_INPROGRESS
}

func (m *Deployment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Deployment) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *Deployment) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Deployment) GetPrevious() github_com_opencontainers_go_digest.Digest {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *Deployment) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DeploymentDescriptor struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Deploy spec. This is the spec used to generate the actual
	// runtime Spec in the Deployment object i.e. a template
	Spec []byte `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	// Mime type of the stored spec
	Mime string `protobuf:"bytes,3,opt,name=Mime,proto3" json:"Mime,omitempty"`
}

func (m *DeploymentDescriptor) Reset()                    { *m = DeploymentDescriptor{} }
func (m *DeploymentDescriptor) String() string            { return proto.CompactTextString(m) }
func (*DeploymentDescriptor) ProtoMessage()               {}
func (*DeploymentDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{3} }

func (m *DeploymentDescriptor) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeploymentDescriptor) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DeploymentDescriptor) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func init() {
	proto.RegisterType((*Profile)(nil), "Profile")
	proto.RegisterType((*Project)(nil), "Project")
	proto.RegisterType((*Deployment)(nil), "Deployment")
	proto.RegisterType((*DeploymentDescriptor)(nil), "DeploymentDescriptor")
	proto.RegisterEnum("DeploymentState", DeploymentState_name, DeploymentState_value)
	proto.RegisterEnum("DeployStateStatus", DeployStateStatus_name, DeployStateStatus_value)
}
func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Orchestrator) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Orchestrator)))
		i += copy(dAtA[i:], m.Orchestrator)
	}
	if len(m.Secrets) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Secrets)))
		i += copy(dAtA[i:], m.Secrets)
	}
	if len(m.Registry) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Registry)))
		i += copy(dAtA[i:], m.Registry)
	}
	if len(m.VCS) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.VCS)))
		i += copy(dAtA[i:], m.VCS)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x3a
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Variables) > 0 {
		for k, _ := range m.Variables {
			dAtA[i] = 0x42
			i++
			v := m.Variables[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Maintainer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Maintainer)))
		i += copy(dAtA[i:], m.Maintainer)
	}
	if len(m.Developers) > 0 {
		for _, s := range m.Developers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Version))
	}
	if len(m.Spec) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Spec)))
		i += copy(dAtA[i:], m.Spec)
	}
	if m.Profile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Profile.Size()))
		n1, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.State))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.ModifiedAt))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Nonce))
	}
	if len(m.Previous) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Previous)))
		i += copy(dAtA[i:], m.Previous)
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DeploymentDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Spec) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Spec)))
		i += copy(dAtA[i:], m.Spec)
	}
	if len(m.Mime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Mime)))
		i += copy(dAtA[i:], m.Mime)
	}
	return i, nil
}

func encodeVarintThrap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Profile) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Secrets)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.VCS)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if len(m.Variables) > 0 {
		for k, v := range m.Variables {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Project) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Maintainer)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Developers) > 0 {
		for _, s := range m.Developers {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	return n
}

func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovThrap(uint64(m.Version))
	}
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovThrap(uint64(m.State))
	}
	if m.Status != 0 {
		n += 1 + sovThrap(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovThrap(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovThrap(uint64(m.ModifiedAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovThrap(uint64(m.Nonce))
	}
	l = len(m.Previous)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *DeploymentDescriptor) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Mime)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func sovThrap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThrap(x uint64) (n int) {
	return sovThrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secrets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secrets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VCS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variables == nil {
				m.Variables = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Variables[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developers = append(m.Developers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec[:0], dAtA[iNdEx:postIndex]...)
			if m.Spec == nil {
				m.Spec = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (DeploymentState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (DeployStateStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Previous = github_com_opencontainers_go_digest.Digest(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec[:0], dAtA[iNdEx:postIndex]...)
			if m.Spec == nil {
				m.Spec = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthThrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThrap   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("thrap.proto", fileDescriptorThrap) }

var fileDescriptorThrap = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xd8, 0x8e, 0x7f, 0xca, 0x59, 0xef, 0x6c, 0x13, 0x2d, 0xa3, 0x08, 0x79, 0xac, 0x3e,
	0xa0, 0x28, 0x28, 0xb6, 0x08, 0x12, 0x8b, 0x2c, 0x2e, 0xd9, 0xd8, 0xa0, 0xec, 0x6e, 0x6c, 0xab,
	0x0d, 0x41, 0x70, 0x6b, 0x4f, 0x2a, 0xf6, 0x10, 0xdb, 0x3d, 0xea, 0x69, 0x1b, 0xf9, 0x15, 0x10,
	0x07, 0x5e, 0x88, 0x3b, 0x47, 0x9e, 0x60, 0x84, 0xc2, 0x1b, 0xf8, 0xc8, 0x09, 0x4d, 0xcd, 0x78,
	0x3c, 0x01, 0x2e, 0x7b, 0x72, 0x57, 0x7d, 0x5f, 0xb9, 0xab, 0xbe, 0xaf, 0xa6, 0xa1, 0x6e, 0x66,
	0x5a, 0x06, 0xed, 0x40, 0x2b, 0xa3, 0x4e, 0xce, 0xa7, 0xbe, 0x99, 0xad, 0x26, 0x6d, 0x4f, 0x2d,
	0x3a, 0x53, 0x35, 0x55, 0x1d, 0x4a, 0x4f, 0x56, 0xf7, 0x14, 0x51, 0x40, 0xa7, 0x84, 0xce, 0x7f,
	0x29, 0x41, 0x65, 0xa4, 0xd5, 0xbd, 0x3f, 0x47, 0x76, 0x0a, 0x85, 0xeb, 0x9e, 0x63, 0xb5, 0xac,
	0xd3, 0xda, 0x6b, 0x67, 0x1b, 0xb9, 0xc7, 0x33, 0x6f, 0x8e, 0x5d, 0xae, 0x16, 0xbe, 0xe1, 0xad,
	0x8d, 0x5c, 0xcc, 0xbb, 0xfc, 0x9c, 0x8b, 0xc2, 0x75, 0x8f, 0x71, 0x28, 0x0d, 0xe4, 0x02, 0x9d,
	0x02, 0x71, 0x1b, 0xdb, 0xc8, 0x85, 0x99, 0x37, 0xef, 0xf2, 0xa5, 0x5c, 0x20, 0x17, 0x84, 0xb1,
	0x2e, 0x1c, 0x0d, 0xb5, 0x37, 0xc3, 0xd0, 0x68, 0x69, 0x94, 0x76, 0x8a, 0xc4, 0x7d, 0xb9, 0x8d,
	0x5c, 0x46, 0x5c, 0x95, 0x03, 0xb9, 0x78, 0xc2, 0x65, 0x9f, 0x40, 0x65, 0x8c, 0x9e, 0x46, 0x13,
	0x3a, 0x25, 0x2a, 0x7b, 0xb1, 0x8d, 0xdc, 0x67, 0x54, 0x16, 0x26, 0x79, 0x2e, 0x76, 0x0c, 0xd6,
	0x86, 0xaa, 0xc0, 0xa9, 0x1f, 0x1a, 0xbd, 0x71, 0x0e, 0x89, 0xcd, 0xb6, 0x91, 0xdb, 0x20, 0xb6,
	0x4e, 0x01, 0x2e, 0x32, 0x0e, 0x73, 0xa1, 0x78, 0x7b, 0x35, 0x76, 0xca, 0x44, 0x7d, 0xb6, 0x8d,
	0xdc, 0x1a, 0x51, 0xd7, 0x5e, 0xc8, 0x45, 0x8c, 0xb0, 0xcf, 0xa1, 0x74, 0x83, 0x46, 0x3a, 0x95,
	0x56, 0xf1, 0xb4, 0x7e, 0xc1, 0xda, 0xa9, 0x3e, 0xed, 0x38, 0xd9, 0x5f, 0x1a, 0xbd, 0xc9, 0x4d,
	0xbc, 0x40, 0x23, 0xb9, 0x20, 0x3e, 0x7b, 0x03, 0xb5, 0x5b, 0xa9, 0x7d, 0x39, 0x99, 0x63, 0xe8,
	0x54, 0xa9, 0xf8, 0xc3, 0xac, 0x38, 0x43, 0x92, 0x7f, 0xf8, 0x60, 0x1b, 0xb9, 0xcf, 0x93, 0x7b,
	0x77, 0x00, 0x17, 0xfb, 0xf2, 0x93, 0x57, 0x50, 0xcb, 0xae, 0x63, 0x36, 0x14, 0x1f, 0x70, 0x93,
	0x38, 0x23, 0xe2, 0x23, 0x3b, 0x86, 0xc3, 0xb5, 0x9c, 0xaf, 0x52, 0x07, 0x44, 0x12, 0x74, 0x0b,
	0x5f, 0x58, 0x27, 0x5f, 0x42, 0xe3, 0xe9, 0x55, 0xef, 0x53, 0xcd, 0x7f, 0xb3, 0x68, 0x1d, 0x7e,
	0x44, 0xcf, 0xb0, 0xc6, 0x7e, 0x1d, 0xc8, 0x74, 0x96, 0x37, 0x3d, 0x35, 0xb9, 0x05, 0xf5, 0x1e,
	0x86, 0x9e, 0xf6, 0x03, 0xe3, 0xab, 0x65, 0xe2, 0xb1, 0xc8, 0xa7, 0xd8, 0x4b, 0x28, 0x8f, 0xd5,
	0x4a, 0x7b, 0x98, 0x38, 0x29, 0xd2, 0x28, 0xee, 0x61, 0xf8, 0xd3, 0x12, 0x75, 0x62, 0x99, 0x48,
	0x02, 0xd6, 0x04, 0xb8, 0x91, 0xfe, 0xd2, 0x48, 0x3f, 0x86, 0xc8, 0x22, 0x91, 0xcb, 0xc4, 0x78,
	0x0f, 0xd7, 0x38, 0x57, 0x01, 0xea, 0x90, 0x0c, 0xaa, 0x89, 0x5c, 0x86, 0xff, 0x5c, 0x8c, 0x09,
	0xc1, 0x5c, 0x6d, 0x16, 0xb8, 0x34, 0x59, 0xcb, 0x56, 0xae, 0x65, 0x07, 0x2a, 0xb7, 0xa8, 0xc3,
	0xb8, 0xdd, 0x78, 0x92, 0x92, 0xd8, 0x85, 0x31, 0x7b, 0x1c, 0xa0, 0x47, 0x53, 0x1c, 0x09, 0x3a,
	0x33, 0x9e, 0x7d, 0x1e, 0xd4, 0x7f, 0xfd, 0xa2, 0xba, 0x73, 0x54, 0x64, 0xdf, 0xcd, 0xc7, 0x70,
	0x38, 0x36, 0xd2, 0x20, 0x8d, 0xd2, 0xb8, 0xb0, 0xdb, 0xfb, 0x0e, 0x28, 0x2f, 0x12, 0x98, 0x9d,
	0x41, 0x39, 0x3e, 0xac, 0x42, 0x1a, 0xac, 0x71, 0xc1, 0x52, 0x22, 0xa1, 0x09, 0x22, 0x52, 0x06,
	0xfb, 0x08, 0x6a, 0x57, 0x1a, 0xa5, 0xc1, 0xbb, 0x4b, 0xe3, 0x54, 0x5a, 0xd6, 0x69, 0x51, 0xec,
	0x13, 0x24, 0x93, 0xba, 0xf3, 0xef, 0x7d, 0x82, 0xab, 0x04, 0xe7, 0x32, 0xb1, 0xb8, 0x03, 0xb5,
	0xf4, 0xd0, 0xa9, 0xd1, 0x84, 0x49, 0xc0, 0xde, 0x40, 0x75, 0xa4, 0x71, 0xed, 0xab, 0x55, 0xe8,
	0x00, 0x6d, 0x7f, 0xfb, 0xef, 0xc8, 0x3d, 0xcb, 0x3d, 0x18, 0x2a, 0xc0, 0xa5, 0xa7, 0x52, 0xb1,
	0xc3, 0xce, 0x54, 0x9d, 0xdf, 0xf9, 0x53, 0x0c, 0x4d, 0xbb, 0x47, 0x3f, 0x22, 0xab, 0x67, 0x1c,
	0x8e, 0xa8, 0xed, 0x1b, 0x0c, 0x43, 0x39, 0x45, 0xa7, 0x4e, 0x0a, 0x3f, 0xc9, 0xf1, 0x01, 0x1c,
	0xef, 0x95, 0xd8, 0xed, 0x84, 0xd2, 0xff, 0xb7, 0x58, 0xa4, 0x7b, 0x21, 0xa7, 0x3b, 0x83, 0xd2,
	0x8d, 0xbf, 0xc0, 0x74, 0xa3, 0xe8, 0x7c, 0x76, 0x05, 0xcf, 0xff, 0xa5, 0x2c, 0xab, 0x43, 0xe5,
	0xdb, 0xc1, 0xdb, 0xc1, 0xf0, 0xbb, 0x81, 0x7d, 0xc0, 0x00, 0xca, 0x57, 0xa2, 0x7f, 0xf9, 0x4d,
	0xdf, 0xb6, 0x62, 0x60, 0x24, 0xfa, 0xa3, 0x4b, 0xd1, 0xb7, 0x0b, 0x31, 0xd0, 0xeb, 0x8f, 0xde,
	0x0d, 0xbf, 0xb7, 0x8b, 0x67, 0xaf, 0xe0, 0xc5, 0x7f, 0x54, 0x67, 0x0d, 0x80, 0xeb, 0xc1, 0x48,
	0x0c, 0xbf, 0x16, 0xfd, 0xf1, 0xd8, 0x3e, 0x60, 0x65, 0x28, 0x0c, 0xdf, 0xda, 0x56, 0x5c, 0xf8,
	0xd5, 0xe5, 0xf5, 0xbb, 0x7e, 0xcf, 0x2e, 0xbc, 0xfe, 0xf4, 0xf7, 0xc7, 0xa6, 0xf5, 0xc7, 0x63,
	0xd3, 0xfa, 0xf3, 0xb1, 0x69, 0xfd, 0xfa, 0x57, 0xf3, 0xe0, 0x07, 0x37, 0xa7, 0x1c, 0xae, 0xee,
	0x95, 0xf6, 0x65, 0x87, 0x9e, 0xe2, 0x4e, 0xf0, 0x30, 0xed, 0x04, 0x93, 0x49, 0x99, 0xde, 0xd8,
	0xcf, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x3d, 0x82, 0xd6, 0xa1, 0x05, 0x00, 0x00,
}
