syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/euforia/thrap/thrapb";


message Build {
    string Dockerfile = 1 [(gogoproto.moretags) = "hcl:\"dockerfile\""];
    string Context    = 2 [(gogoproto.moretags) = "hcl:\"context\" hcle:\"omitempty\""];
}

message Secrets {
    // Destination path
    string Destination = 1 [(gogoproto.moretags) = "hcl:\"destination\""];
    // Format ie. hcl, json, yaml etc.
    string Template = 2 [(gogoproto.moretags) = "hcl:\"template\""];
}

message Volume {
    string Source = 1 [(gogoproto.moretags) = "hcl:\"source\" hcle:\"omitempty\" yaml:\",omitempty\""];
    string Target = 2 [(gogoproto.moretags) = "hcl:\"target\""];
}

message Envionment {
    // File to read environment variables from
    string File = 1 [(gogoproto.moretags) = "hcl:\"file\""];

    // Key-Value pair of variables
    map<string, string> Vars = 2 [(gogoproto.moretags) = "hcl:\"vars\""];
}

message HealthCheck {
    // udp, tcp, http, https
    string Protocol  = 1 [(gogoproto.moretags) = "yaml:\",omitempty\""];
    string Path      = 2 [(gogoproto.moretags) = "yaml:\",omitempty\""];
    string Method    = 3 [(gogoproto.moretags) = "yaml:\",omitempty\""];
    int64  Timeout   = 4 [(gogoproto.moretags) = "yaml:\",omitempty\""];
    int64  Interval  = 5 [(gogoproto.moretags) = "yaml:\",omitempty\""];
    string PortLabel = 6 [(gogoproto.moretags) = "yaml:\",omitempty\""];
}

message Component {
    string              ID        = 1 [(gogoproto.moretags) = "hcle:\"omit\" yaml:\"-\""];
    string              Name      = 2 [(gogoproto.moretags) = "hcl:\"name\""];
    string              Version   = 3 [(gogoproto.moretags) = "hcl:\"version\" yaml:\",omitempty\" hcle:\"omitempty\""];
    string              Type      = 4 [(gogoproto.casttype) = "CompType", (gogoproto.moretags) = "hcl:\"type\""];
    string              Language  = 5 [(gogoproto.casttype) = "LanguageID", (gogoproto.moretags) = "hcl:\"language\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Build info if this is a buildable component
    Build Build = 6 [(gogoproto.moretags) = "hcl:\"build\" yaml:\",omitempty\""];

    // Secrets for this component
    Secrets Secrets = 7 [(gogoproto.moretags) = "hcl:\"secrets\" yaml:\",omitempty\""];

    // Port map so ports can be referenced by variables
    map<string,int32> Ports = 8 [(gogoproto.moretags) = "hcl:\"ports\" hcle:\"omitempty\" yaml:\",omitempty\""];;
    
    // If dep then true is an external dep. If stack item then true exposes
    // to the internet
    bool External = 9 [(gogoproto.moretags) = "hcl:\"external\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // True if this is the head of the stack i.e. consumable api or ui
    bool Head = 10 [(gogoproto.moretags) = "hcl:\"head\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Envionment variables
    Envionment Env = 11 [(gogoproto.moretags) = "hcl:\"env\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Arbitrary KV config map
    map<string, string> Config = 12 [(gogoproto.moretags) = "hcl:\"config\" hcle:\"omitempty\" yaml:\",omitempty\""];
    
    // List of volumes needed
    repeated Volume Volumes = 13 [(gogoproto.moretags) = "hcl:\"volumes\" hcle:\"omitempty\" yaml:\",omitempty\""];
    
    // Command to run the component
    string Cmd = 14 [(gogoproto.moretags) = "hcl:\"cmd\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Args to command
    repeated string Args = 15 [(gogoproto.moretags) = "hcl:\"args\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // All healthchecks
    repeated HealthCheck HealthChecks = 16 [(gogoproto.moretags) = "yaml:\",omitempty\""];
}

message PackManifest {
    // Pack name
    string Name = 1;
	// User supplied constrained versions
	repeated string Versions = 2;
    // Default version
    string DefaultVersion = 3;
    // Base image
	string Image = 4;
    // Files
    repeated string Files = 5;
}

message Language {
	// Language name
	string Name = 1;

	// User supplied constrained versions
	repeated string Versions = 2;

    string DefaultVersion = 3;
	// Source code file extensions of programming language. First if the primary
	// followed by any additionals such as header files etc.
	repeated string FileExts = 4;

    // Extension of binaries generated by this language to ignore
    repeated string IgnoreFiles = 5;

	// Base images usable for developed
	repeated string DevImages = 6;

	// Base images usable to publish
	repeated string PubImages = 7;

    // Additional files part of the language pack
    repeated string ScaffoldFiles = 8;
}

message Stack {
    string                 ID           = 2 [(gogoproto.moretags) = "hcle:\"omit\" yaml:\"-\""];
    string                 Name         = 3 [(gogoproto.moretags) = "hcl:\"name\""];
    string                 Version      = 4 [(gogoproto.moretags) = "hcl:\"version\" hcle:\"omitempty\" yaml:\",omitempty\""];
    map<string, Component> Components   = 5 [(gogoproto.moretags) = "hcl:\"components\""];
    map<string, Component> Dependencies = 6 [(gogoproto.moretags) = "hcl:\"dependencies\" yaml:\",omitempty\""];
    string                 Description  = 7 [(gogoproto.moretags) = "hcl:\"description\" yaml:\",omitempty\" hcle:\"omit\""];
}

message Identity {
    string ID        = 1 [(gogoproto.moretags) = "hcl:\"id\""];
    string Email     = 2 [(gogoproto.moretags) = "hcl:\"email\""];
    bytes  PublicKey = 3 [(gogoproto.moretags) = "hcl:\"publickey\""];
    uint64 Nonce     = 4 [(gogoproto.moretags) = "hcl:\"nonce\""];
    bytes  Signature = 5 [(gogoproto.moretags) = "hcl:\"signature\"" "hcle:\"omit\""];
    // Meta identities e.g. github user, ldap user etc.
    map<string, string> Meta = 6 [(gogoproto.moretags) = "hcl:\"meta\""];
}

message Artifact {
    string             ID       = 1 [(gogoproto.casttype) = "github.com/opencontainers/go-digest.Digest"];
    repeated string    Tags     = 2;
    map<string,string> Labels   = 3;
    int64              Created  = 4;
    int64              DataSize = 5;
}

message Profile {
    string ID                    = 1 [(gogoproto.moretags) = "hcle:\"omit\" yaml:\"-\""];
    string Orchestrator          = 2 [(gogoproto.moretags) = "hcl:\"orchestrator\""];
    string Secrets               = 3 [(gogoproto.moretags) = "hcl:\"secrets\""];
    string Registry              = 4 [(gogoproto.moretags) = "hcl:\"registry\""];
    string VCS                   = 5 [(gogoproto.moretags) = "hcl:\"vcs\""];
    map<string,string> Meta      = 6 [(gogoproto.moretags) = "hcl:\"meta\""];
    map<string,string> Variables = 7 [(gogoproto.moretags) = "hcl:\"variables\""];
}

message Project {
    string ID                  = 1;
    string Name                = 2;
    string Description         = 3;
    string Source              = 4;
    string Owner               = 5;
    string Maintainer          = 6;
    repeated string Developers = 7;
}

enum DeploymentState {
    UNKNOWN = 0;
    CREATE = 1;
    PREPARE = 2;
    DEPLOY = 3;
}

enum DeployStateStatus {
    INPROGRESS = 0;
    OK = 1;
    FAILED = 2;
}

message Deployment {
    // Unique deployment instance name
    string Name = 1; 
    // Incremented on each deploy 
    uint64 Version = 2;
    // Action marshalled & normalized deploy job
    bytes Spec = 3; 
    // Profile for this deployment
    Profile Profile  = 4;
    // State the deployment is in
    DeploymentState State = 5;
    // Status of the given state 
    DeployStateStatus Status = 6;
    
    int64 CreatedAt = 7;
    int64 StartedAt = 8;
    
    // Nonce set when deploy is created
    uint64 Nonce = 9;

    string Previous = 10 [(gogoproto.casttype) = "github.com/opencontainers/go-digest.Digest"];

    // Additional info about the current state
    string StateMessage = 11;
}

message DeploymentDescriptor {
    // Spec template deploy job. This is the spec used to generate the actual
    // runtime Spec in the Deployment object
    bytes Spec = 2; 
    string Mime = 3;
}

message IterOptions {
    string Prefix = 1;
}

service Thrap {
    rpc RegisterStack(Stack) returns (Stack);
    rpc CommitStack(Stack) returns (Stack);
    rpc GetStack(Stack) returns (Stack);
    rpc IterStacks(IterOptions) returns (stream Stack);
    rpc RegisterIdentity(Identity) returns (Identity);
    rpc IterIdentities(IterOptions) returns (stream Identity);
    rpc ConfirmIdentity(Identity) returns (Identity);
    rpc GetIdentity(Identity) returns (Identity);
}
