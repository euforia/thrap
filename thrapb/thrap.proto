syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/euforia/thrap/thrapb";


message Build {
    string Dockerfile = 1 [(gogoproto.moretags) = "hcl:\"dockerfile\""];
    string Context    = 2 [(gogoproto.moretags) = "hcl:\"context\" hcle:\"omitempty\""];
}

message Secrets {
    // Destination path
    string Destination = 1 [(gogoproto.moretags) = "hcl:\"destination\""];
    // Format ie. hcl, json, yaml etc.
    string Format = 2 [(gogoproto.moretags) = "hcl:\"format\""];
}

message Envionment {
    // File to read environment variables from
    string File = 1 [(gogoproto.moretags) = "hcl:\"file\""];

    // Key-Value pair of variables
    map<string, string> Vars = 2 [(gogoproto.moretags) = "hcl:\"vars\""];
}

message Component {
    string              ID        = 1 [(gogoproto.moretags) = "hcle:\"omit\" yaml:\"-\""];
    string              Name      = 2 [(gogoproto.moretags) = "hcl:\"name\""];
    string              Version   = 3 [(gogoproto.moretags) = "hcl:\"version\" yaml:\",omitempty\" hcle:\"omitempty\""];
    string              Type      = 4 [(gogoproto.casttype) = "CompType", (gogoproto.moretags) = "hcl:\"type\""];
    string              Language  = 5 [(gogoproto.casttype) = "LanguageID", (gogoproto.moretags) = "hcl:\"language\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Build info if this is a buildable component
    Build Build = 6 [(gogoproto.moretags) = "hcl:\"build\" yaml:\",omitempty\""];

    // Secrets for this component
    Secrets Secrets = 7 [(gogoproto.moretags) = "hcl:\"secrets\" yaml:\",omitempty\""];

    // If dep then true is an external dep. If stack item then true exposes
    // to the internet
    bool External = 8 [(gogoproto.moretags) = "hcl:\"external\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // True if this is the head of the stack i.e. consumable api.
    bool Head = 9 [(gogoproto.moretags) = "hcl:\"head\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Envionment variables
    Envionment Env = 10 [(gogoproto.moretags) = "hcl:\"env\" hcle:\"omitempty\" yaml:\",omitempty\""];

    // Arbitrary KV config map
	map<string, string> Config = 11 [(gogoproto.moretags) = "hcl:\"config\" hcle:\"omitempty\" yaml:\",omitempty\""];
}

message Language {
	// Language name
	string Name = 1;

	// User supplied constrained versions
	repeated string Versions = 2;

    string DefaultVersion = 3;
	// Source code file extensions of programming language. First if the primary
	// followed by any additionals such as header files etc.
	repeated string FileExts = 4;

    // Extension of binaries generated by this language to ignore
    repeated string IgnoreExts = 5;

	// Base images usable for developed
	repeated string DevImages = 6;

	// Base images usable to publish
	repeated string PubImages = 7;

    repeated string ScaffoldFiles = 8;
}

message Stack {
    string                 ID           = 2 [(gogoproto.moretags) = "hcle:\"omit\" yaml:\"-\""];
    string                 Name         = 3 [(gogoproto.moretags) = "hcl:\"name\""];
    string                 Version      = 4 [(gogoproto.moretags) = "hcl:\"version\" hcle:\"omit\" yaml:\",omitempty\""];
    map<string, Component> Components   = 5 [(gogoproto.moretags) = "hcl:\"components\""];
    map<string, Component> Dependencies = 6 [(gogoproto.moretags) = "hcl:\"dependencies\" yaml:\",omitempty\""];
    string                 Description  = 7 [(gogoproto.moretags) = "hcl:\"description\" yaml:\",omitempty\" hcle:\"omit\""];
}

message ChainHeader {
    bytes  Previous   = 1;
    uint64 Height     = 2;
    int64  Timestamp  = 3;
    bytes  DataDigest = 4;
}

message Identity {
    string ID = 1 [(gogoproto.moretags) = "hcl:\"id\""];
    string Email = 2 [(gogoproto.moretags) = "hcl:\"email\""];
    bytes PublicKey = 3 [(gogoproto.moretags) = "hcl:\"publickey\""];
    map<string, string> Meta = 4 [(gogoproto.moretags) = "hcl:\"meta\""];
    uint64 Nonce = 5 [(gogoproto.moretags) = "hcl:\"nonce\""];
    bytes Signature = 6 [(gogoproto.moretags) = "hcl:\"signature\"" "hcle:\"omit\""];
}

service Thrap {
    rpc RegisterStack(Stack) returns (Stack);
    rpc RegisterIdentity(Identity) returns (Identity);
    rpc ConfirmIdentity(Identity) returns (Identity);
}
