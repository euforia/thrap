// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thrap.proto

/*
	Package thrapb is a generated protocol buffer package.

	It is generated from these files:
		thrap.proto

	It has these top-level messages:
		Build
		Secrets
		Volume
		Envionment
		HealthCheck
		Component
		PackManifest
		Language
		Artifact
		Stack
		Identity
		Profile
		Project
		Deployment
		DeploymentDescriptor
		IterOptions
*/
package thrapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_opencontainers_go_digest "github.com/opencontainers/go-digest"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeploymentState int32

const (
	DeploymentState_UNKNOWN DeploymentState = 0
	DeploymentState_CREATE  DeploymentState = 1
	DeploymentState_PREPARE DeploymentState = 2
	DeploymentState_DEPLOY  DeploymentState = 3
)

var DeploymentState_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE",
	2: "PREPARE",
	3: "DEPLOY",
}
var DeploymentState_value = map[string]int32{
	"UNKNOWN": 0,
	"CREATE":  1,
	"PREPARE": 2,
	"DEPLOY":  3,
}

func (x DeploymentState) String() string {
	return proto.EnumName(DeploymentState_name, int32(x))
}
func (DeploymentState) EnumDescriptor() ([]byte, []int) { return fileDescriptorThrap, []int{0} }

type DeployStateStatus int32

const (
	DeployStateStatus_INPROGRESS DeployStateStatus = 0
	DeployStateStatus_OK         DeployStateStatus = 1
	DeployStateStatus_FAILED     DeployStateStatus = 2
)

var DeployStateStatus_name = map[int32]string{
	0: "INPROGRESS",
	1: "OK",
	2: "FAILED",
}
var DeployStateStatus_value = map[string]int32{
	"INPROGRESS": 0,
	"OK":         1,
	"FAILED":     2,
}

func (x DeployStateStatus) String() string {
	return proto.EnumName(DeployStateStatus_name, int32(x))
}
func (DeployStateStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorThrap, []int{1} }

type Build struct {
	Dockerfile string `protobuf:"bytes,1,opt,name=Dockerfile,proto3" json:"Dockerfile,omitempty" hcl:"dockerfile"`
	Context    string `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty" hcl:"context" hcle:"omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{0} }

func (m *Build) GetDockerfile() string {
	if m != nil {
		return m.Dockerfile
	}
	return ""
}

func (m *Build) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type Secrets struct {
	// Destination path
	Destination string `protobuf:"bytes,1,opt,name=Destination,proto3" json:"Destination,omitempty" hcl:"destination"`
	// Format ie. hcl, json, yaml etc.
	Template string `protobuf:"bytes,2,opt,name=Template,proto3" json:"Template,omitempty" hcl:"template"`
}

func (m *Secrets) Reset()                    { *m = Secrets{} }
func (m *Secrets) String() string            { return proto.CompactTextString(m) }
func (*Secrets) ProtoMessage()               {}
func (*Secrets) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{1} }

func (m *Secrets) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Secrets) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

type Volume struct {
	Source string `protobuf:"bytes,1,opt,name=Source,proto3" json:"Source,omitempty" hcl:"source" hcle:"omitempty" yaml:",omitempty"`
	Target string `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty" hcl:"target"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{2} }

func (m *Volume) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Volume) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type Envionment struct {
	// File to read environment variables from
	File string `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty" hcl:"file"`
	// Key-Value pair of variables
	Vars map[string]string `protobuf:"bytes,2,rep,name=Vars" json:"Vars,omitempty" hcl:"vars" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Envionment) Reset()                    { *m = Envionment{} }
func (m *Envionment) String() string            { return proto.CompactTextString(m) }
func (*Envionment) ProtoMessage()               {}
func (*Envionment) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{3} }

func (m *Envionment) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Envionment) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

type HealthCheck struct {
	// udp, tcp, http, https
	Protocol  string `protobuf:"bytes,1,opt,name=Protocol,proto3" json:"Protocol,omitempty" yaml:",omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty" yaml:",omitempty"`
	Method    string `protobuf:"bytes,3,opt,name=Method,proto3" json:"Method,omitempty" yaml:",omitempty"`
	Timeout   int64  `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty" yaml:",omitempty"`
	Interval  int64  `protobuf:"varint,5,opt,name=Interval,proto3" json:"Interval,omitempty" yaml:",omitempty"`
	PortLabel string `protobuf:"bytes,6,opt,name=PortLabel,proto3" json:"PortLabel,omitempty" yaml:",omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{4} }

func (m *HealthCheck) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *HealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheck) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HealthCheck) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *HealthCheck) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *HealthCheck) GetPortLabel() string {
	if m != nil {
		return m.PortLabel
	}
	return ""
}

type Component struct {
	ID       string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" hcle:"omit" yaml:"-"`
	Name     string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" hcl:"name"`
	Version  string     `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty" hcl:"version" yaml:",omitempty" hcle:"omitempty"`
	Type     CompType   `protobuf:"bytes,4,opt,name=Type,proto3,casttype=CompType" json:"Type,omitempty" hcl:"type"`
	Language LanguageID `protobuf:"bytes,5,opt,name=Language,proto3,casttype=LanguageID" json:"Language,omitempty" hcl:"language" hcle:"omitempty" yaml:",omitempty"`
	// Build info if this is a buildable component
	Build *Build `protobuf:"bytes,6,opt,name=Build" json:"Build,omitempty" hcl:"build" yaml:",omitempty"`
	// Secrets for this component
	Secrets *Secrets `protobuf:"bytes,7,opt,name=Secrets" json:"Secrets,omitempty" hcl:"secrets" yaml:",omitempty"`
	// Port map so ports can be referenced by variables
	Ports map[string]int32 `protobuf:"bytes,8,rep,name=Ports" json:"Ports,omitempty" hcl:"ports" hcle:"omitempty" yaml:",omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// If dep then true is an external dep. If stack item then true exposes
	// to the internet
	External bool `protobuf:"varint,9,opt,name=External,proto3" json:"External,omitempty" hcl:"external" hcle:"omitempty" yaml:",omitempty"`
	// True if this is the head of the stack i.e. consumable api or ui
	Head bool `protobuf:"varint,10,opt,name=Head,proto3" json:"Head,omitempty" hcl:"head" hcle:"omitempty" yaml:",omitempty"`
	// Envionment variables
	Env *Envionment `protobuf:"bytes,11,opt,name=Env" json:"Env,omitempty" hcl:"env" hcle:"omitempty" yaml:",omitempty"`
	// Arbitrary KV config map
	Config map[string]string `protobuf:"bytes,12,rep,name=Config" json:"Config,omitempty" hcl:"config" hcle:"omitempty" yaml:",omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of volumes needed
	Volumes []*Volume `protobuf:"bytes,13,rep,name=Volumes" json:"Volumes,omitempty" hcl:"volumes" hcle:"omitempty" yaml:",omitempty"`
	// Command to run the component
	Cmd string `protobuf:"bytes,14,opt,name=Cmd,proto3" json:"Cmd,omitempty" hcl:"cmd" hcle:"omitempty" yaml:",omitempty"`
	// Args to command
	Args []string `protobuf:"bytes,15,rep,name=Args" json:"Args,omitempty" hcl:"args" hcle:"omitempty" yaml:",omitempty"`
	// All healthchecks
	HealthChecks []*HealthCheck `protobuf:"bytes,16,rep,name=HealthChecks" json:"HealthChecks,omitempty" yaml:",omitempty"`
}

func (m *Component) Reset()                    { *m = Component{} }
func (m *Component) String() string            { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()               {}
func (*Component) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{5} }

func (m *Component) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Component) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Component) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Component) GetType() CompType {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Component) GetLanguage() LanguageID {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Component) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *Component) GetSecrets() *Secrets {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Component) GetPorts() map[string]int32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Component) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *Component) GetHead() bool {
	if m != nil {
		return m.Head
	}
	return false
}

func (m *Component) GetEnv() *Envionment {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Component) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Component) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Component) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Component) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Component) GetHealthChecks() []*HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

type PackManifest struct {
	// Pack name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// User supplied constrained versions
	Versions []string `protobuf:"bytes,2,rep,name=Versions" json:"Versions,omitempty"`
	// Default version
	DefaultVersion string `protobuf:"bytes,3,opt,name=DefaultVersion,proto3" json:"DefaultVersion,omitempty"`
	// Base image
	Image string `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`
	// Files
	Files []string `protobuf:"bytes,5,rep,name=Files" json:"Files,omitempty"`
}

func (m *PackManifest) Reset()                    { *m = PackManifest{} }
func (m *PackManifest) String() string            { return proto.CompactTextString(m) }
func (*PackManifest) ProtoMessage()               {}
func (*PackManifest) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{6} }

func (m *PackManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackManifest) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *PackManifest) GetDefaultVersion() string {
	if m != nil {
		return m.DefaultVersion
	}
	return ""
}

func (m *PackManifest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PackManifest) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type Language struct {
	// Language name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// User supplied constrained versions
	Versions       []string `protobuf:"bytes,2,rep,name=Versions" json:"Versions,omitempty"`
	DefaultVersion string   `protobuf:"bytes,3,opt,name=DefaultVersion,proto3" json:"DefaultVersion,omitempty"`
	// Source code file extensions of programming language. First if the primary
	// followed by any additionals such as header files etc.
	FileExts []string `protobuf:"bytes,4,rep,name=FileExts" json:"FileExts,omitempty"`
	// Extension of binaries generated by this language to ignore
	IgnoreFiles []string `protobuf:"bytes,5,rep,name=IgnoreFiles" json:"IgnoreFiles,omitempty"`
	// Base images usable for developed
	DevImages []string `protobuf:"bytes,6,rep,name=DevImages" json:"DevImages,omitempty"`
	// Base images usable to publish
	PubImages []string `protobuf:"bytes,7,rep,name=PubImages" json:"PubImages,omitempty"`
	// Additional files part of the language pack
	ScaffoldFiles []string `protobuf:"bytes,8,rep,name=ScaffoldFiles" json:"ScaffoldFiles,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{7} }

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Language) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *Language) GetDefaultVersion() string {
	if m != nil {
		return m.DefaultVersion
	}
	return ""
}

func (m *Language) GetFileExts() []string {
	if m != nil {
		return m.FileExts
	}
	return nil
}

func (m *Language) GetIgnoreFiles() []string {
	if m != nil {
		return m.IgnoreFiles
	}
	return nil
}

func (m *Language) GetDevImages() []string {
	if m != nil {
		return m.DevImages
	}
	return nil
}

func (m *Language) GetPubImages() []string {
	if m != nil {
		return m.PubImages
	}
	return nil
}

func (m *Language) GetScaffoldFiles() []string {
	if m != nil {
		return m.ScaffoldFiles
	}
	return nil
}

type Artifact struct {
	ID       github_com_opencontainers_go_digest.Digest `protobuf:"bytes,1,opt,name=ID,proto3,casttype=github.com/opencontainers/go-digest.Digest" json:"ID,omitempty"`
	Tags     []string                                   `protobuf:"bytes,2,rep,name=Tags" json:"Tags,omitempty"`
	Labels   map[string]string                          `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Created  int64                                      `protobuf:"varint,4,opt,name=Created,proto3" json:"Created,omitempty"`
	DataSize int64                                      `protobuf:"varint,5,opt,name=DataSize,proto3" json:"DataSize,omitempty"`
}

func (m *Artifact) Reset()                    { *m = Artifact{} }
func (m *Artifact) String() string            { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()               {}
func (*Artifact) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{8} }

func (m *Artifact) GetID() github_com_opencontainers_go_digest.Digest {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Artifact) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Artifact) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Artifact) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Artifact) GetDataSize() int64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

type Stack struct {
	ID           string                `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty" hcle:"omit" yaml:"-"`
	Name         string                `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" hcl:"name"`
	Version      string                `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty" hcl:"version" hcle:"omitempty" yaml:",omitempty"`
	Components   map[string]*Component `protobuf:"bytes,5,rep,name=Components" json:"Components,omitempty" hcl:"components" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Dependencies map[string]*Component `protobuf:"bytes,6,rep,name=Dependencies" json:"Dependencies,omitempty" hcl:"dependencies" yaml:",omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Description  string                `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty" hcl:"description" yaml:",omitempty" hcle:"omit"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{9} }

func (m *Stack) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Stack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stack) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Stack) GetComponents() map[string]*Component {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *Stack) GetDependencies() map[string]*Component {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Stack) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Identity struct {
	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" hcl:"id"`
	Email     string `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty" hcl:"email"`
	PublicKey []byte `protobuf:"bytes,3,opt,name=PublicKey,proto3" json:"PublicKey,omitempty" hcl:"publickey"`
	Nonce     uint64 `protobuf:"varint,4,opt,name=Nonce,proto3" json:"Nonce,omitempty" hcl:"nonce"`
	Signature []byte `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty" hcl:"signature"hcle:"omit"`
	// Meta identities e.g. github user, ldap user etc.
	Meta map[string]string `protobuf:"bytes,6,rep,name=Meta" json:"Meta,omitempty" hcl:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{10} }

func (m *Identity) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Identity) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Identity) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Identity) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Identity) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Identity) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Profile struct {
	ID           string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" hcle:"omit" yaml:"-"`
	Name         string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" hcl:"name"`
	Orchestrator string            `protobuf:"bytes,3,opt,name=Orchestrator,proto3" json:"Orchestrator,omitempty" hcl:"orchestrator"`
	Secrets      string            `protobuf:"bytes,4,opt,name=Secrets,proto3" json:"Secrets,omitempty" hcl:"secrets"`
	Registry     string            `protobuf:"bytes,5,opt,name=Registry,proto3" json:"Registry,omitempty" hcl:"registry"`
	VCS          string            `protobuf:"bytes,6,opt,name=VCS,proto3" json:"VCS,omitempty" hcl:"vcs"`
	Meta         map[string]string `protobuf:"bytes,7,rep,name=Meta" json:"Meta,omitempty" hcl:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variables    map[string]string `protobuf:"bytes,8,rep,name=Variables" json:"Variables,omitempty" hcl:"variables" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{11} }

func (m *Profile) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *Profile) GetSecrets() string {
	if m != nil {
		return m.Secrets
	}
	return ""
}

func (m *Profile) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *Profile) GetVCS() string {
	if m != nil {
		return m.VCS
	}
	return ""
}

func (m *Profile) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Profile) GetVariables() map[string]string {
	if m != nil {
		return m.Variables
	}
	return nil
}

type Project struct {
	ID          string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Source      string   `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	Owner       string   `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Maintainer  string   `protobuf:"bytes,6,opt,name=Maintainer,proto3" json:"Maintainer,omitempty"`
	Developers  []string `protobuf:"bytes,7,rep,name=Developers" json:"Developers,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{12} }

func (m *Project) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Project) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Project) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *Project) GetDevelopers() []string {
	if m != nil {
		return m.Developers
	}
	return nil
}

type Deployment struct {
	// Unique deployment instance name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Incremented on each deploy
	Version uint64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// Action marshalled & normalized deploy job
	Spec []byte `protobuf:"bytes,3,opt,name=Spec,proto3" json:"Spec,omitempty"`
	// Profile for this deployment
	Profile *Profile `protobuf:"bytes,4,opt,name=Profile" json:"Profile,omitempty"`
	// State the deployment is in
	State DeploymentState `protobuf:"varint,5,opt,name=State,proto3,enum=DeploymentState" json:"State,omitempty"`
	// Status of the given state
	Status     DeployStateStatus `protobuf:"varint,6,opt,name=Status,proto3,enum=DeployStateStatus" json:"Status,omitempty"`
	CreatedAt  int64             `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ModifiedAt int64             `protobuf:"varint,8,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	// Nonce set when deploy is created
	Nonce    uint64                                     `protobuf:"varint,9,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Previous github_com_opencontainers_go_digest.Digest `protobuf:"bytes,10,opt,name=Previous,proto3,casttype=github.com/opencontainers/go-digest.Digest" json:"Previous,omitempty"`
	// Additional info about the current state
	StateMessage string `protobuf:"bytes,11,opt,name=StateMessage,proto3" json:"StateMessage,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{13} }

func (m *Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deployment) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Deployment) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Deployment) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Deployment) GetState() DeploymentState {
	if m != nil {
		return m.State
	}
	return DeploymentState_UNKNOWN
}

func (m *Deployment) GetStatus() DeployStateStatus {
	if m != nil {
		return m.Status
	}
	return DeployStateStatus_INPROGRESS
}

func (m *Deployment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Deployment) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *Deployment) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Deployment) GetPrevious() github_com_opencontainers_go_digest.Digest {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *Deployment) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DeploymentDescriptor struct {
	// Spec template deploy job. This is the spec used to generate the actual
	// runtime Spec in the Deployment object
	Spec []byte `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Mime string `protobuf:"bytes,3,opt,name=Mime,proto3" json:"Mime,omitempty"`
}

func (m *DeploymentDescriptor) Reset()                    { *m = DeploymentDescriptor{} }
func (m *DeploymentDescriptor) String() string            { return proto.CompactTextString(m) }
func (*DeploymentDescriptor) ProtoMessage()               {}
func (*DeploymentDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{14} }

func (m *DeploymentDescriptor) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DeploymentDescriptor) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

type IterOptions struct {
	Prefix string `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
}

func (m *IterOptions) Reset()                    { *m = IterOptions{} }
func (m *IterOptions) String() string            { return proto.CompactTextString(m) }
func (*IterOptions) ProtoMessage()               {}
func (*IterOptions) Descriptor() ([]byte, []int) { return fileDescriptorThrap, []int{15} }

func (m *IterOptions) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func init() {
	proto.RegisterType((*Build)(nil), "Build")
	proto.RegisterType((*Secrets)(nil), "Secrets")
	proto.RegisterType((*Volume)(nil), "Volume")
	proto.RegisterType((*Envionment)(nil), "Envionment")
	proto.RegisterType((*HealthCheck)(nil), "HealthCheck")
	proto.RegisterType((*Component)(nil), "Component")
	proto.RegisterType((*PackManifest)(nil), "PackManifest")
	proto.RegisterType((*Language)(nil), "Language")
	proto.RegisterType((*Artifact)(nil), "Artifact")
	proto.RegisterType((*Stack)(nil), "Stack")
	proto.RegisterType((*Identity)(nil), "Identity")
	proto.RegisterType((*Profile)(nil), "Profile")
	proto.RegisterType((*Project)(nil), "Project")
	proto.RegisterType((*Deployment)(nil), "Deployment")
	proto.RegisterType((*DeploymentDescriptor)(nil), "DeploymentDescriptor")
	proto.RegisterType((*IterOptions)(nil), "IterOptions")
	proto.RegisterEnum("DeploymentState", DeploymentState_name, DeploymentState_value)
	proto.RegisterEnum("DeployStateStatus", DeployStateStatus_name, DeployStateStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Thrap service

type ThrapClient interface {
	RegisterStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error)
	CommitStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error)
	GetStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error)
	IterStacks(ctx context.Context, in *IterOptions, opts ...grpc.CallOption) (Thrap_IterStacksClient, error)
	RegisterIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	IterIdentities(ctx context.Context, in *IterOptions, opts ...grpc.CallOption) (Thrap_IterIdentitiesClient, error)
	ConfirmIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	GetIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
}

type thrapClient struct {
	cc *grpc.ClientConn
}

func NewThrapClient(cc *grpc.ClientConn) ThrapClient {
	return &thrapClient{cc}
}

func (c *thrapClient) RegisterStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error) {
	out := new(Stack)
	err := grpc.Invoke(ctx, "/Thrap/RegisterStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thrapClient) CommitStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error) {
	out := new(Stack)
	err := grpc.Invoke(ctx, "/Thrap/CommitStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thrapClient) GetStack(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Stack, error) {
	out := new(Stack)
	err := grpc.Invoke(ctx, "/Thrap/GetStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thrapClient) IterStacks(ctx context.Context, in *IterOptions, opts ...grpc.CallOption) (Thrap_IterStacksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Thrap_serviceDesc.Streams[0], c.cc, "/Thrap/IterStacks", opts...)
	if err != nil {
		return nil, err
	}
	x := &thrapIterStacksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Thrap_IterStacksClient interface {
	Recv() (*Stack, error)
	grpc.ClientStream
}

type thrapIterStacksClient struct {
	grpc.ClientStream
}

func (x *thrapIterStacksClient) Recv() (*Stack, error) {
	m := new(Stack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *thrapClient) RegisterIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := grpc.Invoke(ctx, "/Thrap/RegisterIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thrapClient) IterIdentities(ctx context.Context, in *IterOptions, opts ...grpc.CallOption) (Thrap_IterIdentitiesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Thrap_serviceDesc.Streams[1], c.cc, "/Thrap/IterIdentities", opts...)
	if err != nil {
		return nil, err
	}
	x := &thrapIterIdentitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Thrap_IterIdentitiesClient interface {
	Recv() (*Identity, error)
	grpc.ClientStream
}

type thrapIterIdentitiesClient struct {
	grpc.ClientStream
}

func (x *thrapIterIdentitiesClient) Recv() (*Identity, error) {
	m := new(Identity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *thrapClient) ConfirmIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := grpc.Invoke(ctx, "/Thrap/ConfirmIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thrapClient) GetIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := grpc.Invoke(ctx, "/Thrap/GetIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Thrap service

type ThrapServer interface {
	RegisterStack(context.Context, *Stack) (*Stack, error)
	CommitStack(context.Context, *Stack) (*Stack, error)
	GetStack(context.Context, *Stack) (*Stack, error)
	IterStacks(*IterOptions, Thrap_IterStacksServer) error
	RegisterIdentity(context.Context, *Identity) (*Identity, error)
	IterIdentities(*IterOptions, Thrap_IterIdentitiesServer) error
	ConfirmIdentity(context.Context, *Identity) (*Identity, error)
	GetIdentity(context.Context, *Identity) (*Identity, error)
}

func RegisterThrapServer(s *grpc.Server, srv ThrapServer) {
	s.RegisterService(&_Thrap_serviceDesc, srv)
}

func _Thrap_RegisterStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).RegisterStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/RegisterStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).RegisterStack(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thrap_CommitStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).CommitStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/CommitStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).CommitStack(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thrap_GetStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).GetStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/GetStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).GetStack(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thrap_IterStacks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IterOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThrapServer).IterStacks(m, &thrapIterStacksServer{stream})
}

type Thrap_IterStacksServer interface {
	Send(*Stack) error
	grpc.ServerStream
}

type thrapIterStacksServer struct {
	grpc.ServerStream
}

func (x *thrapIterStacksServer) Send(m *Stack) error {
	return x.ServerStream.SendMsg(m)
}

func _Thrap_RegisterIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).RegisterIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/RegisterIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).RegisterIdentity(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thrap_IterIdentities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IterOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThrapServer).IterIdentities(m, &thrapIterIdentitiesServer{stream})
}

type Thrap_IterIdentitiesServer interface {
	Send(*Identity) error
	grpc.ServerStream
}

type thrapIterIdentitiesServer struct {
	grpc.ServerStream
}

func (x *thrapIterIdentitiesServer) Send(m *Identity) error {
	return x.ServerStream.SendMsg(m)
}

func _Thrap_ConfirmIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).ConfirmIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/ConfirmIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).ConfirmIdentity(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thrap_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrapServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Thrap/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrapServer).GetIdentity(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Thrap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Thrap",
	HandlerType: (*ThrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStack",
			Handler:    _Thrap_RegisterStack_Handler,
		},
		{
			MethodName: "CommitStack",
			Handler:    _Thrap_CommitStack_Handler,
		},
		{
			MethodName: "GetStack",
			Handler:    _Thrap_GetStack_Handler,
		},
		{
			MethodName: "RegisterIdentity",
			Handler:    _Thrap_RegisterIdentity_Handler,
		},
		{
			MethodName: "ConfirmIdentity",
			Handler:    _Thrap_ConfirmIdentity_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Thrap_GetIdentity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IterStacks",
			Handler:       _Thrap_IterStacks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IterIdentities",
			Handler:       _Thrap_IterIdentities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thrap.proto",
}

func (m *Build) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Build) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dockerfile) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Dockerfile)))
		i += copy(dAtA[i:], m.Dockerfile)
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	return i, nil
}

func (m *Secrets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Secrets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	return i, nil
}

func (m *Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Volume) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *Envionment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Envionment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if len(m.Vars) > 0 {
		for k, _ := range m.Vars {
			dAtA[i] = 0x12
			i++
			v := m.Vars[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Timeout))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Interval))
	}
	if len(m.PortLabel) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.PortLabel)))
		i += copy(dAtA[i:], m.PortLabel)
	}
	return i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if m.Build != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Build.Size()))
		n1, err := m.Build.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Secrets != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Secrets.Size()))
		n2, err := m.Secrets.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Ports) > 0 {
		for k, _ := range m.Ports {
			dAtA[i] = 0x42
			i++
			v := m.Ports[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + sovThrap(uint64(v))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintThrap(dAtA, i, uint64(v))
		}
	}
	if m.External {
		dAtA[i] = 0x48
		i++
		if m.External {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Head {
		dAtA[i] = 0x50
		i++
		if m.Head {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Env != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Env.Size()))
		n3, err := m.Env.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Config) > 0 {
		for k, _ := range m.Config {
			dAtA[i] = 0x62
			i++
			v := m.Config[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Volumes) > 0 {
		for _, msg := range m.Volumes {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintThrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cmd) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Cmd)))
		i += copy(dAtA[i:], m.Cmd)
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintThrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PackManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackManifest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DefaultVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.DefaultVersion)))
		i += copy(dAtA[i:], m.DefaultVersion)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Language) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Language) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DefaultVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.DefaultVersion)))
		i += copy(dAtA[i:], m.DefaultVersion)
	}
	if len(m.FileExts) > 0 {
		for _, s := range m.FileExts {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IgnoreFiles) > 0 {
		for _, s := range m.IgnoreFiles {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DevImages) > 0 {
		for _, s := range m.DevImages {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PubImages) > 0 {
		for _, s := range m.PubImages {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ScaffoldFiles) > 0 {
		for _, s := range m.ScaffoldFiles {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Artifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Artifact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x1a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Created != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Created))
	}
	if m.DataSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.DataSize))
	}
	return i, nil
}

func (m *Stack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Components) > 0 {
		for k, _ := range m.Components {
			dAtA[i] = 0x2a
			i++
			v := m.Components[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovThrap(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + msgSize
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintThrap(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if len(m.Dependencies) > 0 {
		for k, _ := range m.Dependencies {
			dAtA[i] = 0x32
			i++
			v := m.Dependencies[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovThrap(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + msgSize
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintThrap(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Identity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Identity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Nonce))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x32
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Orchestrator) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Orchestrator)))
		i += copy(dAtA[i:], m.Orchestrator)
	}
	if len(m.Secrets) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Secrets)))
		i += copy(dAtA[i:], m.Secrets)
	}
	if len(m.Registry) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Registry)))
		i += copy(dAtA[i:], m.Registry)
	}
	if len(m.VCS) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.VCS)))
		i += copy(dAtA[i:], m.VCS)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x3a
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Variables) > 0 {
		for k, _ := range m.Variables {
			dAtA[i] = 0x42
			i++
			v := m.Variables[k]
			mapSize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			i = encodeVarintThrap(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrap(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Maintainer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Maintainer)))
		i += copy(dAtA[i:], m.Maintainer)
	}
	if len(m.Developers) > 0 {
		for _, s := range m.Developers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Version))
	}
	if len(m.Spec) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Spec)))
		i += copy(dAtA[i:], m.Spec)
	}
	if m.Profile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Profile.Size()))
		n6, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.State))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.ModifiedAt))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintThrap(dAtA, i, uint64(m.Nonce))
	}
	if len(m.Previous) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Previous)))
		i += copy(dAtA[i:], m.Previous)
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DeploymentDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Spec)))
		i += copy(dAtA[i:], m.Spec)
	}
	if len(m.Mime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Mime)))
		i += copy(dAtA[i:], m.Mime)
	}
	return i, nil
}

func (m *IterOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IterOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrap(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	return i, nil
}

func encodeVarintThrap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Build) Size() (n int) {
	var l int
	_ = l
	l = len(m.Dockerfile)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *Secrets) Size() (n int) {
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *Volume) Size() (n int) {
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *Envionment) Size() (n int) {
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Vars) > 0 {
		for k, v := range m.Vars {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HealthCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovThrap(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovThrap(uint64(m.Interval))
	}
	l = len(m.PortLabel)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *Component) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Build != nil {
		l = m.Build.Size()
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Secrets != nil {
		l = m.Secrets.Size()
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Ports) > 0 {
		for k, v := range m.Ports {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + sovThrap(uint64(v))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if m.External {
		n += 2
	}
	if m.Head {
		n += 2
	}
	if m.Env != nil {
		l = m.Env.Size()
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 2 + l + sovThrap(uint64(l))
		}
	}
	return n
}

func (m *PackManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	l = len(m.DefaultVersion)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	return n
}

func (m *Language) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	l = len(m.DefaultVersion)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.FileExts) > 0 {
		for _, s := range m.FileExts {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.IgnoreFiles) > 0 {
		for _, s := range m.IgnoreFiles {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.DevImages) > 0 {
		for _, s := range m.DevImages {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.PubImages) > 0 {
		for _, s := range m.PubImages {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.ScaffoldFiles) > 0 {
		for _, s := range m.ScaffoldFiles {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	return n
}

func (m *Artifact) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if m.Created != 0 {
		n += 1 + sovThrap(uint64(m.Created))
	}
	if m.DataSize != 0 {
		n += 1 + sovThrap(uint64(m.DataSize))
	}
	return n
}

func (m *Stack) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Components) > 0 {
		for k, v := range m.Components {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovThrap(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if len(m.Dependencies) > 0 {
		for k, v := range m.Dependencies {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovThrap(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *Identity) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovThrap(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Profile) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Secrets)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.VCS)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	if len(m.Variables) > 0 {
		for k, v := range m.Variables {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovThrap(uint64(len(k))) + 1 + len(v) + sovThrap(uint64(len(v)))
			n += mapEntrySize + 1 + sovThrap(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Project) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Maintainer)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if len(m.Developers) > 0 {
		for _, s := range m.Developers {
			l = len(s)
			n += 1 + l + sovThrap(uint64(l))
		}
	}
	return n
}

func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovThrap(uint64(m.Version))
	}
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovThrap(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovThrap(uint64(m.State))
	}
	if m.Status != 0 {
		n += 1 + sovThrap(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovThrap(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovThrap(uint64(m.ModifiedAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovThrap(uint64(m.Nonce))
	}
	l = len(m.Previous)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *DeploymentDescriptor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	l = len(m.Mime)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func (m *IterOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovThrap(uint64(l))
	}
	return n
}

func sovThrap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThrap(x uint64) (n int) {
	return sovThrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Build) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Build: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Build: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dockerfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dockerfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Secrets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Secrets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Secrets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Envionment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Envionment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Envionment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vars == nil {
				m.Vars = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Vars[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = CompType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = LanguageID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Build == nil {
				m.Build = &Build{}
			}
			if err := m.Build.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secrets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secrets == nil {
				m.Secrets = &Secrets{}
			}
			if err := m.Secrets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ports == nil {
				m.Ports = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ports[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field External", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.External = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Head = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = &Envionment{}
			}
			if err := m.Env.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &HealthCheck{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Language) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Language: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Language: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileExts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileExts = append(m.FileExts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreFiles = append(m.IgnoreFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevImages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevImages = append(m.DevImages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubImages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubImages = append(m.PubImages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaffoldFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScaffoldFiles = append(m.ScaffoldFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Artifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Artifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Artifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = github_com_opencontainers_go_digest.Digest(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Components == nil {
				m.Components = make(map[string]*Component)
			}
			var mapkey string
			var mapvalue *Component
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthThrap
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthThrap
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Component{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Components[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dependencies == nil {
				m.Dependencies = make(map[string]*Component)
			}
			var mapkey string
			var mapvalue *Component
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthThrap
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthThrap
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Component{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dependencies[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Identity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secrets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secrets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VCS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variables == nil {
				m.Variables = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthThrap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipThrap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthThrap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Variables[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developers = append(m.Developers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec[:0], dAtA[iNdEx:postIndex]...)
			if m.Spec == nil {
				m.Spec = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (DeploymentState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (DeployStateStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Previous = github_com_opencontainers_go_digest.Digest(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec[:0], dAtA[iNdEx:postIndex]...)
			if m.Spec == nil {
				m.Spec = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IterOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IterOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IterOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthThrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThrap   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("thrap.proto", fileDescriptorThrap) }

var fileDescriptorThrap = []byte{
	// 2074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcb, 0x93, 0x1b, 0x47,
	0x19, 0xb7, 0xde, 0xd2, 0x27, 0x59, 0x96, 0x3b, 0x8e, 0x99, 0x52, 0x25, 0x3b, 0x62, 0xe2, 0x84,
	0xc5, 0x89, 0x67, 0xed, 0x75, 0xc0, 0x89, 0xcb, 0x15, 0x6a, 0xf5, 0x88, 0xa3, 0x78, 0x1f, 0x62,
	0xb4, 0x71, 0x0a, 0x2e, 0xa9, 0xde, 0x51, 0x4b, 0x1a, 0x76, 0x34, 0xa3, 0x9a, 0x69, 0x09, 0x0b,
	0x0e, 0x54, 0x71, 0xa4, 0x38, 0x50, 0x5c, 0xf8, 0x07, 0x38, 0x73, 0xe1, 0xcc, 0x9d, 0xe2, 0xc4,
	0x95, 0xcb, 0x14, 0x65, 0xfe, 0x83, 0x39, 0xfa, 0x40, 0x51, 0xfd, 0x98, 0x87, 0xd6, 0xbb, 0x6b,
	0x6d, 0x8a, 0x5c, 0x76, 0xa7, 0xbf, 0xdf, 0xf7, 0x7d, 0xdd, 0xfd, 0xbd, 0x5b, 0x50, 0xa5, 0x53,
	0x0f, 0xcf, 0xf5, 0xb9, 0xe7, 0x52, 0xb7, 0x79, 0x6f, 0x62, 0xd1, 0xe9, 0xe2, 0x44, 0x37, 0xdd,
	0xd9, 0xce, 0xc4, 0x9d, 0xb8, 0x3b, 0x9c, 0x7c, 0xb2, 0x18, 0xf3, 0x15, 0x5f, 0xf0, 0x2f, 0xc1,
	0xae, 0xfd, 0x1a, 0x0a, 0xed, 0x85, 0x65, 0x8f, 0xd0, 0xc7, 0x00, 0x5d, 0xd7, 0x3c, 0x25, 0xde,
	0xd8, 0xb2, 0x89, 0x92, 0x69, 0x65, 0xb6, 0x2b, 0xed, 0x5b, 0x61, 0xa0, 0x36, 0xa6, 0xa6, 0xfd,
	0x58, 0x1b, 0xc5, 0x90, 0x66, 0xa4, 0xf8, 0xd0, 0x13, 0x28, 0x75, 0x5c, 0x87, 0x92, 0x17, 0x54,
	0xc9, 0x72, 0x11, 0x2d, 0x0c, 0xd4, 0x2d, 0x2e, 0x62, 0x0a, 0xba, 0xd6, 0x9a, 0x9a, 0x36, 0x79,
	0xac, 0xb9, 0x33, 0x8b, 0x92, 0xd9, 0x9c, 0xae, 0x34, 0x23, 0x12, 0xd1, 0x3c, 0x28, 0x0d, 0x89,
	0xe9, 0x11, 0xea, 0xa3, 0x47, 0x50, 0xed, 0x12, 0x9f, 0x5a, 0x0e, 0xa6, 0x96, 0xeb, 0xc8, 0xfd,
	0xdf, 0x0e, 0x03, 0xf5, 0xa6, 0xd8, 0x3f, 0xc1, 0x34, 0x23, 0xcd, 0x89, 0x74, 0x28, 0x1f, 0x93,
	0xd9, 0xdc, 0xc6, 0x94, 0xc8, 0x23, 0xa0, 0x30, 0x50, 0xeb, 0x5c, 0x8a, 0x4a, 0x40, 0x33, 0x62,
	0x1e, 0xed, 0x37, 0x50, 0x7c, 0xee, 0xda, 0x8b, 0x19, 0x41, 0xcf, 0xa0, 0x38, 0x74, 0x17, 0x9e,
	0x19, 0xdd, 0xf6, 0x61, 0x18, 0xa8, 0x3b, 0x5c, 0xce, 0xe7, 0xe4, 0xd7, 0x4f, 0xde, 0x5a, 0xe1,
	0x99, 0xfd, 0x58, 0xfb, 0x28, 0x75, 0x17, 0xa9, 0x02, 0x6d, 0x43, 0xf1, 0x18, 0x7b, 0x13, 0x12,
	0xd9, 0xa1, 0x11, 0x06, 0x6a, 0x4d, 0x1c, 0x82, 0x93, 0x35, 0x43, 0xe2, 0xda, 0x9f, 0x33, 0x00,
	0x3d, 0x67, 0x69, 0xb9, 0xce, 0x8c, 0x38, 0x14, 0x69, 0x90, 0xff, 0x3c, 0xb1, 0x78, 0x3d, 0x0c,
	0x54, 0xe0, 0x62, 0xc2, 0xd6, 0x1c, 0x43, 0x9f, 0x42, 0xfe, 0x39, 0xf6, 0x7c, 0x25, 0xdb, 0xca,
	0x6d, 0x57, 0x77, 0xdf, 0xd6, 0x13, 0x71, 0x9d, 0xd1, 0x7b, 0x0e, 0xf5, 0x56, 0x29, 0xd1, 0x25,
	0xf6, 0x7c, 0xcd, 0xe0, 0x22, 0xcd, 0x47, 0x50, 0x89, 0x59, 0x50, 0x03, 0x72, 0xa7, 0x64, 0x25,
	0xb6, 0x32, 0xd8, 0x27, 0xba, 0x05, 0x85, 0x25, 0xb6, 0x17, 0xd2, 0x74, 0x86, 0x58, 0x3c, 0xce,
	0x7e, 0x92, 0xd1, 0xfe, 0x9a, 0x85, 0xea, 0x17, 0x04, 0xdb, 0x74, 0xda, 0x99, 0x12, 0xf3, 0x14,
	0x3d, 0x80, 0xf2, 0x80, 0x45, 0x8c, 0xe9, 0xda, 0x69, 0xef, 0xbc, 0x6e, 0x91, 0x98, 0x0d, 0xfd,
	0x10, 0xf2, 0x03, 0x4c, 0xa7, 0xd2, 0x22, 0x17, 0xb0, 0x73, 0x16, 0x74, 0x0f, 0x8a, 0x07, 0x84,
	0x4e, 0xdd, 0x91, 0x92, 0xbb, 0x8c, 0x59, 0x32, 0xa1, 0x1d, 0x28, 0x1d, 0x5b, 0x33, 0xe2, 0x2e,
	0xa8, 0x92, 0x6f, 0x65, 0xb6, 0x73, 0x17, 0xf1, 0x47, 0x5c, 0xec, 0xf4, 0x7d, 0x87, 0x12, 0x6f,
	0x89, 0x6d, 0xa5, 0x70, 0x99, 0x44, 0xcc, 0x86, 0x1e, 0x42, 0x65, 0xe0, 0x7a, 0x74, 0x1f, 0x9f,
	0x10, 0x5b, 0x29, 0x5e, 0x76, 0xaa, 0x84, 0x4f, 0xfb, 0x13, 0x40, 0xa5, 0xe3, 0xce, 0xe6, 0xae,
	0xc3, 0x7c, 0xbb, 0x0d, 0xd9, 0x7e, 0x57, 0x5a, 0x4b, 0x09, 0x03, 0xf5, 0x56, 0x12, 0x50, 0x51,
	0x2c, 0xdd, 0xd3, 0x8c, 0x6c, 0xbf, 0xcb, 0xa2, 0xe0, 0x10, 0xcf, 0xa2, 0x08, 0x4e, 0x5c, 0xe9,
	0xe0, 0x19, 0x8b, 0x02, 0x86, 0xa1, 0x43, 0x28, 0x3d, 0x27, 0x9e, 0xcf, 0xd2, 0x43, 0x18, 0xe9,
	0xe3, 0x30, 0x50, 0xef, 0x0b, 0x8f, 0x0b, 0xfa, 0x39, 0x01, 0x7a, 0x4e, 0xf6, 0x49, 0x25, 0x48,
	0x87, 0xfc, 0xf1, 0x6a, 0x4e, 0xb8, 0x05, 0x2b, 0xed, 0x66, 0xbc, 0x27, 0x5d, 0xcd, 0x89, 0xf6,
	0x2a, 0x50, 0xcb, 0xec, 0x22, 0x8c, 0xc3, 0xe0, 0x7c, 0xe8, 0x1b, 0x28, 0xef, 0x63, 0x67, 0xb2,
	0xc0, 0x13, 0xc2, 0x6d, 0x58, 0x69, 0x77, 0xc2, 0x40, 0x7d, 0xc0, 0x65, 0x6c, 0x09, 0x6c, 0x92,
	0x33, 0xaf, 0x02, 0x15, 0x22, 0x45, 0xfd, 0xae, 0x11, 0x2b, 0x45, 0x3f, 0x91, 0xb5, 0x88, 0x5b,
	0xbb, 0xba, 0x5b, 0xd4, 0xf9, 0xaa, 0xfd, 0xfd, 0x30, 0x50, 0xdf, 0xe5, 0xbb, 0x9c, 0xb0, 0xf5,
	0x79, 0x59, 0x28, 0x6b, 0xd8, 0xd3, 0xb8, 0x9e, 0x28, 0x25, 0xae, 0xa2, 0xac, 0xcb, 0x75, 0xfb,
	0xbd, 0x30, 0x50, 0x55, 0x91, 0xdc, 0x82, 0x72, 0x9e, 0x9a, 0xb8, 0x1a, 0x7d, 0x03, 0x05, 0xe6,
	0x53, 0x5f, 0x29, 0xcb, 0x8c, 0x8b, 0x7d, 0xaa, 0x73, 0xba, 0xc8, 0xb8, 0xdd, 0x30, 0x50, 0x75,
	0xae, 0x73, 0xce, 0x88, 0x1b, 0xd5, 0x0b, 0xa1, 0x17, 0xfd, 0x14, 0xca, 0xbd, 0x17, 0x94, 0x78,
	0x0e, 0xb6, 0x95, 0x4a, 0x2b, 0xb3, 0x5d, 0x6e, 0xff, 0x28, 0xb6, 0x25, 0x91, 0xc0, 0x46, 0xfa,
	0x62, 0x35, 0xa8, 0x07, 0xf9, 0x2f, 0x08, 0x1e, 0x29, 0xc0, 0xd5, 0x3d, 0x08, 0x03, 0xf5, 0x1e,
	0x57, 0x37, 0x25, 0x78, 0xb4, 0x91, 0x2a, 0x2e, 0x8e, 0x8e, 0x20, 0xd7, 0x73, 0x96, 0x4a, 0x95,
	0xdb, 0xaf, 0x9a, 0x2a, 0x35, 0xed, 0xfb, 0x61, 0xa0, 0x7e, 0x24, 0x4e, 0xe8, 0x2c, 0x37, 0xd2,
	0xc8, 0x34, 0x21, 0x13, 0x8a, 0x1d, 0xd7, 0x19, 0x5b, 0x13, 0xa5, 0xc6, 0x8d, 0x79, 0x3b, 0x65,
	0x4c, 0x01, 0x08, 0x6b, 0x26, 0xe5, 0xd7, 0xe4, 0xd4, 0xcd, 0xca, 0xaf, 0xd0, 0x80, 0xbe, 0x86,
	0x92, 0xa8, 0xea, 0xbe, 0x72, 0x9d, 0xef, 0x52, 0xd2, 0xc5, 0x3a, 0x9d, 0x24, 0x82, 0x61, 0x23,
	0xbd, 0x91, 0x36, 0xd4, 0x86, 0x5c, 0x67, 0x36, 0x52, 0xea, 0x3c, 0xde, 0x13, 0x0b, 0x98, 0xb3,
	0xcd, 0x6c, 0xca, 0x84, 0x99, 0x67, 0xf6, 0xbc, 0x89, 0xaf, 0xdc, 0x68, 0xe5, 0xb6, 0x2b, 0x29,
	0xcf, 0x60, 0x6f, 0xb2, 0xd9, 0x69, 0xb8, 0x38, 0x7a, 0x0a, 0xb5, 0x54, 0x41, 0xf6, 0x95, 0x06,
	0xbf, 0x68, 0x4d, 0x4f, 0x11, 0x2f, 0xaa, 0x50, 0x6b, 0x82, 0xcd, 0x4f, 0x00, 0x92, 0x28, 0x7e,
	0x53, 0x53, 0x28, 0xa4, 0x9a, 0x42, 0xf3, 0x53, 0xa8, 0xa6, 0x5c, 0x76, 0xa5, 0x7e, 0xf2, 0xc7,
	0x0c, 0xd4, 0x06, 0xd8, 0x3c, 0x3d, 0xc0, 0x8e, 0x35, 0x26, 0x3e, 0x45, 0x48, 0x96, 0x3c, 0x21,
	0x2d, 0x4a, 0x5c, 0x13, 0xca, 0xb2, 0x3a, 0x89, 0x66, 0x57, 0x31, 0xe2, 0x35, 0xfa, 0x00, 0xea,
	0x5d, 0x32, 0xc6, 0x0b, 0x9b, 0xae, 0x55, 0x41, 0xe3, 0x0c, 0x95, 0x1d, 0xa1, 0x3f, 0x63, 0x35,
	0x2a, 0x2f, 0x8e, 0xc0, 0x17, 0x8c, 0xca, 0x5a, 0xa9, 0xaf, 0x14, 0xb8, 0x5a, 0xb1, 0xd0, 0x7e,
	0x9b, 0x4d, 0x6a, 0xda, 0x77, 0x76, 0xa0, 0x26, 0x94, 0xd9, 0x6e, 0xbd, 0x17, 0xd4, 0x57, 0xf2,
	0x42, 0x47, 0xb4, 0x46, 0x2d, 0xa8, 0xf6, 0x27, 0x8e, 0xeb, 0x91, 0xf4, 0xe1, 0xd2, 0x24, 0xf4,
	0x0e, 0x54, 0xba, 0x64, 0xc9, 0x2f, 0xe1, 0x2b, 0x45, 0x8e, 0x27, 0x04, 0x86, 0x0e, 0x16, 0x27,
	0x12, 0x2d, 0x09, 0x34, 0x26, 0xa0, 0x3b, 0x70, 0x7d, 0x68, 0xe2, 0xf1, 0xd8, 0xb5, 0x47, 0x42,
	0x7f, 0x99, 0x73, 0xac, 0x13, 0xb5, 0xff, 0x66, 0xa0, 0xbc, 0xe7, 0x51, 0x6b, 0x8c, 0x4d, 0x8a,
	0x3e, 0x4b, 0xb5, 0x2c, 0xfd, 0x55, 0xa0, 0xde, 0x4d, 0x8d, 0x93, 0xee, 0x9c, 0x38, 0x6c, 0xaa,
	0xc3, 0x96, 0x43, 0x3c, 0x7f, 0x67, 0xe2, 0xde, 0x1b, 0x59, 0x13, 0xe2, 0x53, 0xbd, 0xcb, 0xff,
	0xf1, 0x46, 0x86, 0x20, 0x7f, 0x8c, 0x27, 0x91, 0xb1, 0xf8, 0x37, 0x6b, 0xee, 0xbc, 0x3b, 0xfa,
	0x4a, 0x4e, 0x96, 0xd3, 0x68, 0x3b, 0x5d, 0xd0, 0x79, 0x34, 0x19, 0x92, 0x09, 0x29, 0x50, 0xea,
	0x78, 0x04, 0x53, 0x32, 0x12, 0xcd, 0xdd, 0x88, 0x96, 0xcc, 0x92, 0x5d, 0x4c, 0xf1, 0xd0, 0xfa,
	0x95, 0xe8, 0x40, 0x39, 0x23, 0x5e, 0xb3, 0xd0, 0x4c, 0x29, 0xbb, 0x52, 0x68, 0xfe, 0x23, 0x0f,
	0x85, 0x21, 0xc5, 0xe6, 0xa9, 0x6c, 0xd8, 0xd9, 0x2b, 0x34, 0xec, 0xdc, 0x66, 0x0d, 0x3b, 0x7f,
	0x51, 0xc3, 0xde, 0xa8, 0x16, 0xc9, 0x40, 0xda, 0x07, 0x88, 0x4b, 0xa7, 0x88, 0x15, 0x56, 0x4d,
	0xf9, 0xc9, 0x93, 0x9a, 0x2a, 0x7b, 0x53, 0x32, 0xba, 0x9b, 0x31, 0xa2, 0x19, 0x29, 0x79, 0x34,
	0x86, 0x5a, 0x97, 0xcc, 0x89, 0x33, 0x22, 0x8e, 0x69, 0xc9, 0xd8, 0xaa, 0xee, 0x2a, 0x52, 0x5f,
	0x1a, 0x12, 0x1a, 0xb7, 0xc3, 0x40, 0xbd, 0x23, 0x87, 0xf1, 0x04, 0x3b, 0xef, 0xc0, 0x6b, 0x7a,
	0xd1, 0x57, 0x7c, 0xb2, 0x37, 0x3d, 0x6b, 0xce, 0x27, 0xfb, 0xd2, 0x99, 0x59, 0x7b, 0x94, 0x60,
	0x97, 0x8f, 0x2f, 0x62, 0xee, 0x8f, 0x78, 0x9b, 0x7d, 0xb8, 0x71, 0xe6, 0xce, 0xe7, 0xf8, 0xbc,
	0x95, 0xf6, 0x79, 0x75, 0x17, 0x12, 0x33, 0xa5, 0xab, 0xda, 0x33, 0xb8, 0xf9, 0xda, 0x75, 0xbf,
	0xad, 0x32, 0xed, 0x5f, 0x59, 0x28, 0xf7, 0x47, 0xc4, 0xa1, 0x16, 0x5d, 0xa1, 0x77, 0x52, 0xd9,
	0x54, 0x0b, 0x03, 0xb5, 0xcc, 0xaf, 0x6c, 0x8d, 0x44, 0x0c, 0xbd, 0x0f, 0x85, 0xde, 0x0c, 0x5b,
	0xb6, 0x0c, 0xb8, 0x1b, 0x61, 0xa0, 0x56, 0x45, 0x7f, 0x65, 0x54, 0xcd, 0x10, 0x28, 0x7a, 0xc0,
	0x73, 0xdc, 0xb6, 0xcc, 0x67, 0x64, 0xc5, 0xe3, 0xad, 0xd6, 0x7e, 0x2b, 0x0c, 0xd4, 0x1b, 0x62,
	0xf2, 0xe0, 0xc8, 0x29, 0xe1, 0x63, 0x68, 0xc4, 0xc5, 0x34, 0x1f, 0xba, 0x8e, 0x29, 0x6a, 0x60,
	0x3e, 0xa5, 0xd9, 0x61, 0x54, 0xcd, 0x10, 0x28, 0x7a, 0x02, 0x95, 0xa1, 0x35, 0x71, 0x30, 0x5d,
	0x78, 0x22, 0xa1, 0x6a, 0xed, 0xad, 0x30, 0x50, 0x9b, 0x62, 0x4e, 0x8a, 0x10, 0x2d, 0xed, 0x83,
	0x44, 0x00, 0x3d, 0x82, 0xfc, 0x01, 0xa1, 0x58, 0x06, 0xce, 0x5b, 0x7a, 0x74, 0x6b, 0x9d, 0x51,
	0xcf, 0xbe, 0x49, 0x66, 0x84, 0x62, 0xcd, 0xe0, 0x02, 0xec, 0x4d, 0x12, 0xb3, 0x5c, 0x29, 0x51,
	0x7f, 0x9f, 0x87, 0xd2, 0xc0, 0x73, 0xf9, 0xcb, 0xf3, 0xff, 0x3b, 0x5b, 0x3f, 0x86, 0xda, 0x91,
	0x67, 0x4e, 0x89, 0x4f, 0x3d, 0x4c, 0x5d, 0x4f, 0xa6, 0xf5, 0xed, 0x30, 0x50, 0x11, 0xe7, 0x75,
	0x53, 0xa0, 0x66, 0xac, 0xf1, 0xa2, 0x0f, 0x93, 0xa9, 0x53, 0xa4, 0xf9, 0xcd, 0x30, 0x50, 0xaf,
	0xaf, 0xcd, 0x9a, 0xc9, 0x64, 0xa9, 0x43, 0xd9, 0x20, 0x13, 0xcb, 0xa7, 0xde, 0x4a, 0x0e, 0xd1,
	0xc9, 0x73, 0xd5, 0x93, 0x80, 0x66, 0xc4, 0x3c, 0x48, 0x85, 0xdc, 0xf3, 0xce, 0x50, 0xbe, 0x3f,
	0xae, 0x87, 0x81, 0x5a, 0x11, 0xf5, 0xc3, 0xf4, 0x35, 0x83, 0x21, 0xe8, 0xc7, 0xd2, 0x0b, 0x25,
	0xee, 0x05, 0xa4, 0x4b, 0xfb, 0xbc, 0xc9, 0x09, 0xe8, 0x4b, 0xfe, 0x30, 0xb4, 0xf0, 0x49, 0xd4,
	0x17, 0xaa, 0xbb, 0xdf, 0x8b, 0x85, 0x63, 0x44, 0x68, 0x48, 0xc2, 0x6d, 0x19, 0x01, 0x9a, 0x91,
	0x88, 0x7f, 0x6b, 0x87, 0x36, 0x9f, 0x40, 0x7d, 0x7d, 0xab, 0x2b, 0x85, 0xc3, 0xdf, 0x32, 0x3c,
	0x1c, 0x7e, 0x41, 0x4c, 0x8a, 0xea, 0x49, 0x38, 0x44, 0x7d, 0x28, 0x71, 0xba, 0x74, 0x72, 0x6b,
	0xbd, 0x12, 0x89, 0x6e, 0x9d, 0x26, 0xa1, 0xdb, 0xf1, 0x4f, 0x02, 0x62, 0x78, 0x88, 0x5e, 0xf7,
	0xb7, 0xa0, 0x70, 0xf4, 0x4b, 0x87, 0x78, 0xc2, 0x65, 0x86, 0x58, 0xa0, 0x2d, 0x80, 0x03, 0x6c,
	0xc9, 0x7e, 0x28, 0x5c, 0x64, 0xa4, 0x28, 0x0c, 0xef, 0x92, 0x25, 0xb1, 0xdd, 0x39, 0xf1, 0xa2,
	0xee, 0x9c, 0xa2, 0x68, 0xbf, 0xcb, 0x31, 0x86, 0xb9, 0xed, 0xae, 0xf8, 0x2f, 0x01, 0xe7, 0xcd,
	0x1f, 0x4a, 0xd2, 0x42, 0xd8, 0x4d, 0xf2, 0x49, 0x33, 0x40, 0x90, 0x1f, 0xce, 0x89, 0x29, 0x0a,
	0x82, 0xc1, 0xbf, 0x91, 0x16, 0xa7, 0x07, 0x3f, 0x3f, 0x7b, 0xff, 0xc8, 0xb5, 0x11, 0xe7, 0xcd,
	0x07, 0xbc, 0xd7, 0x51, 0x91, 0xef, 0xf5, 0xdd, 0x86, 0x9e, 0x9c, 0x80, 0xd3, 0x0d, 0x01, 0xa3,
	0xbb, 0x50, 0x64, 0x1f, 0x0b, 0x9f, 0x5f, 0xac, 0xbe, 0x8b, 0x24, 0x23, 0x47, 0x05, 0x62, 0x48,
	0x0e, 0x36, 0x85, 0xc8, 0x16, 0xbd, 0x47, 0x79, 0x81, 0xcf, 0x19, 0x09, 0x81, 0x9b, 0xc9, 0x1d,
	0x59, 0x63, 0x8b, 0xc3, 0x65, 0x0e, 0xa7, 0x28, 0xcc, 0xb8, 0xa2, 0x58, 0x55, 0xf8, 0x0d, 0x65,
	0x6d, 0xfa, 0x12, 0xca, 0x03, 0x8f, 0x2c, 0x2d, 0x77, 0xe1, 0xf3, 0x27, 0xcd, 0xd5, 0xc7, 0x91,
	0x58, 0x1e, 0x69, 0x50, 0xe3, 0xc7, 0x3e, 0x20, 0xbe, 0xcf, 0x26, 0xc3, 0x2a, 0xb7, 0xf0, 0x1a,
	0x4d, 0xfb, 0x0c, 0x6e, 0x25, 0x96, 0x88, 0x62, 0xc2, 0xf5, 0x62, 0x3b, 0x67, 0x53, 0x76, 0x46,
	0x90, 0x3f, 0xb0, 0xa2, 0xe6, 0x6f, 0xf0, 0x6f, 0xed, 0x7d, 0xa8, 0xf6, 0x29, 0xf1, 0x8e, 0x78,
	0x20, 0xf9, 0x2c, 0x92, 0x06, 0x1e, 0x19, 0x5b, 0x2f, 0xa4, 0x3b, 0xe5, 0xea, 0x6e, 0x07, 0x6e,
	0x9c, 0x31, 0x38, 0xaa, 0x42, 0xe9, 0xab, 0xc3, 0x67, 0x87, 0x47, 0x5f, 0x1f, 0x36, 0xae, 0x21,
	0x80, 0x62, 0xc7, 0xe8, 0xed, 0x1d, 0xf7, 0x1a, 0x19, 0x06, 0x0c, 0x8c, 0xde, 0x60, 0xcf, 0xe8,
	0x35, 0xb2, 0x0c, 0xe8, 0xf6, 0x06, 0xfb, 0x47, 0x3f, 0x6b, 0xe4, 0xee, 0x3e, 0xe2, 0x0d, 0x6b,
	0xdd, 0x19, 0xa8, 0x0e, 0xd0, 0x3f, 0x1c, 0x18, 0x47, 0x4f, 0x8d, 0xde, 0x70, 0xd8, 0xb8, 0x86,
	0x8a, 0x90, 0x3d, 0x7a, 0xd6, 0xc8, 0x30, 0xc1, 0xcf, 0xf7, 0xfa, 0xfb, 0xbd, 0x6e, 0x23, 0xbb,
	0xfb, 0x97, 0x2c, 0x14, 0x8e, 0xa7, 0x1e, 0x9e, 0x23, 0x15, 0xae, 0x8b, 0x1a, 0x43, 0x3c, 0x31,
	0xfa, 0x14, 0x45, 0xe3, 0x6f, 0xca, 0xff, 0xe8, 0x5d, 0x36, 0xea, 0xcf, 0x66, 0x16, 0x3d, 0x1f,
	0x6e, 0x42, 0xf9, 0x29, 0xb9, 0x00, 0xbb, 0x03, 0xd0, 0x8f, 0xf4, 0xfa, 0xa8, 0xa6, 0xa7, 0xec,
	0x12, 0xf1, 0xdc, 0xcf, 0xa0, 0x6d, 0x68, 0x44, 0x27, 0x88, 0xfb, 0x65, 0x25, 0x6e, 0x22, 0xcd,
	0xe4, 0x13, 0x7d, 0x08, 0xf5, 0x7e, 0xc2, 0xc5, 0x66, 0x8a, 0x75, 0x9d, 0x09, 0xeb, 0xfd, 0x0c,
	0xfa, 0x01, 0x9b, 0x0b, 0x9c, 0xb1, 0xe5, 0xcd, 0xde, 0xa0, 0xf5, 0x3d, 0xa8, 0x3e, 0x25, 0xf4,
	0x72, 0xa6, 0xf6, 0x83, 0xbf, 0xbf, 0xdc, 0xca, 0xfc, 0xf3, 0xe5, 0x56, 0xe6, 0xdf, 0x2f, 0xb7,
	0x32, 0x7f, 0xf8, 0xcf, 0xd6, 0xb5, 0x9f, 0xab, 0xa9, 0x08, 0x24, 0x8b, 0xb1, 0xeb, 0x59, 0x78,
	0x87, 0xff, 0xfe, 0x2a, 0xfe, 0x9e, 0x9c, 0x14, 0xf9, 0x0f, 0xab, 0x0f, 0xff, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xf2, 0x2d, 0x0f, 0x6e, 0x96, 0x15, 0x00, 0x00,
}
